###############################################################################
# ActiveRecord
###############################################################################
snippet hasm
	has_many ${1:association}
snippet hasmt
	has_many ${1:association}, through: ${2:association}
snippet norma
	normalize_attribute${1:s} ${2:attribute}
snippet normado
	normalize_attribute${1:s} ${2:attribute} do |value|
		${0}
	end
###############################################################################
# ActiveModel
###############################################################################
snippet valid
	validates ${1:attribute}
snippet validp
	validates ${1:attribute},
						presence: true${0}
###############################################################################
# Gemfile
###############################################################################
snippet :source
	source 'https://rubygems.org'

###############################################################################
# Rubocop
###############################################################################
snippet rubod
	# rubocop:disable ${1:LineLength}
snippet ruboe
	# rubocop:enable ${1:LineLength}
###############################################################################
# Ruby
###############################################################################
snippet (
	(${0})
snippet [
	[${0}]
snippet {
	{ ${0} }
snippet class
	class ${1:ClassName}
		${0}
	end
snippet class<
	class ${1:Parent} < ${2:Child}
		${0}
	end
snippet class::
	class ${1:Parent}::${2:Child}
		${0}
	end
snippet do
	do
		${0}
	end
snippet do|
	do |${1:value}|
		${0}
	end
snippet def
	def ${1:function_name}
		${0}
	end

snippet defa
	def ${1:function_name}(${2:args})
		${0}
	end
snippet defs
	def self.${1:function_name}
		${0}
	end
snippet defsa
	def self.${1:function_name}(${2:args})
		${0}
	end
snippet enc
	# Encoding: utf-8
snippet frozlit
	# frozen_string_literal: true
	${0}
snippet inc
	include ${1:ModuleName}
snippet let
	let(${1:name}) { ${2:memoized_object} }
snippet mod
	module ${1:PowerfulModuleName}
		${0}
	end
snippet mod::
	module ${1:Parent}::${2:Child}
		${0}
	end
snippet pri
	private
	
	${1:def}${2}
snippet prot
	protected
	
	${1:def}${2}
snippet pry
	require 'pry'; binding.pry;
snippet req
	require '${1:library}'
	${0}
snippet rubygems
	source 'https://rubygems.org'

###############################################################################
# RSpec
###############################################################################

snippet cont
	context '${1:describe what is going on}' do

		${2}

	end
snippet desc
	describe '${1:something that needs testing}' do

		${0}

	end
snippet descc
	RSpec.describe ${1:SomeClass} do

		${2}

	end
snippet desk
	RSpec.describe ${1:ClassName} do

		${0}

	end
snippet expt
	expect(${1:somthing}).to ${2} 
snippet exptba
	expect(${1:somthing}).to be_a(${2:ClassName})
snippet expteq
	expect(${1:somthing}).to eq(${2:something_else})
snippet exptn
	expect(${1:somthing}).to_not ${2} 
snippet exptneq
	expect(${1:somthing}).to_not eq(${2:something_else})
snippet it
	it '${1:will do something really cool}' do
		${0}
	end
snippet itp
	it '${1:should do something really cool pending thing}'
snippet its
	it { should ${1:do_some_really_cool_things} }${0}
snippet itsama
	it { should allow_mass_assignment_of(${1:attribute}) }
	${2}
snippet itsamaa
	it { should allow_mass_assignment_of(${1:attribute}).as(${2:roll}) }
	${3}
snippet its!ama
	it { should_not allow_mass_assignment_of(${1:attribute}) }
	${2}
snippet its!amaa
	it { should_not allow_mass_assignment_of(${1:attribute}).as(${2:roll}) }
	${3}
snippet itsav
	it { should allow_value(${1:value}).for(:${2:attribute}) }
	${3}
snippet itsbt
	it { should belong_to ${1:association} }${0}
snippet itsha
	it { should have_attribute ${1:attribute}) }${0}
snippet itshdbi
	it { should have_db_index ${1:column_name} }${0}
snippet itshdbia
	it { should have_db_index([ ${1:column_names} ]) }${0}
snippet itshm
	it { should have_many ${1:association} }${0}
snippet itshmt
	it { should have_many(${1:association}).through(${2:association}) }${0}
snippet itshvf
	it { should have_a_valid_factory ${1:factory_name} }${0}
snippet itsn
	it { should_not ${1:do_some_really_cool_things} }${0}
snippet itsna
	it { should normalize_attribute :${1:attribute} }${0}
snippet itsnav
	it { should_not allow_value(${1:value}).for(:${2:attribute}) }${0}
snippet itsho
	it { should have_one ${1:association} }${0}
snippet itsvlo<
	it { should validate_length_of(${1:attribute}).is_at_most(${2:value}) }${0}
snippet itsvpo
	it { should validate_presence_of(${1:attribute}) }${0}
snippet itsvuo
	it { should validate_uniqueness_of(${1:attribute}) }${0}
snippet modelrspec
	require '${1:rails_helper}'

	RSpec.describe ${1:ClassName} do
	  ${0}
	  describe 'Associations' do
	  end		

	  describe 'Attributes' do
	  end		

	  describe 'Data Integrity' do
	  end		

	  describe 'Database' do
	  end		

	  describe 'Factories' do
	  end		

	  describe 'Security' do
	  end		

	  describe 'Validations' do
	  end		

	end
snippet rspec
	require '${1:rails_helper}'

	RSpec.describe ${2:ClassName} do

		${0}

	end
